// Components/admin/CarsTable.jsx
"use client";

import { useEffect, useMemo, useRef, useState } from "react";
import { StatusBadge } from "./Badges";
import { fmtBaht, fmtDateTimeLocal } from "./utils";

const MAX_FILE_MB = 3;

/** ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ERP CONFIG (‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const ERP_DELETE_URL =
  "https://demo.erpeazy.com/api/method/erpnext.api.delete_vehicle";
const ERP_EDIT_URL =
  "https://demo.erpeazy.com/api/method/erpnext.api.edit_vehicles";
// const ERP_AUTH = "token xxx:yyy";

/** ‚úÖ Base URL ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏õ‡∏•‡∏á URL ‡∏£‡∏π‡∏õ */
const ERP_BASE = process.env.NEXT_PUBLIC_ERP_BASE || "https://demo.erpeazy.com";
function normalizeImage(u) {
  if (!u) return "";
  const s0 = String(u).trim();
  if (/^(data:|blob:)/i.test(s0)) return s0; // ‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏∞ data: / blob:
  let s = s0;
  if (s.startsWith("//")) s = "https:" + s;
  if (s.startsWith("/")) s = ERP_BASE.replace(/\/+$/, "") + s;
  if (!/^https?:\/\//i.test(s)) {
    s = ERP_BASE.replace(/\/+$/, "") + "/" + s.replace(/^\/+/, "");
  }
  return encodeURI(s);
}

export default function CarsTable({
  cars = [],
  bookings = [],
  now = new Date(),
  nextBookingMap = {},
  onEdit,
  onDelete,

  // ‚úÖ default ‡πÅ‡∏õ‡∏•‡∏á EN/TH ‚Üí TH (robust)
  getCarRowStatus = (c) => {
    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà ‚Äú‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÜ‚Äù ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏µ‡∏¢‡πå
    const firstNonEmpty = (...xs) =>
      xs.find(
        (s) =>
          String(s ?? "")
            .replace(/\u00A0|\u200B|\u200C|\u200D/g, "")
            .trim().length > 0
      );

    const raw0 = firstNonEmpty(
      c?.status,
      c?.stage,
      c?.vehicle_stage,
      c?.car_status,
      c?.status_text,
      ""
    );
    const raw = String(raw0)
      .normalize("NFKC")
      .replace(/\u00A0|\u200B|\u200C|\u200D/g, " ") // NBSP/ZWSP ‚Üí space
      .trim()
      .toLowerCase()
      .replace(/\s+/g, " "); // squeeze spaces
    const compact = raw.replace(/\s+/g, ""); // "inrent", "inuse" etc.

    // ‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á
    if (
      raw === "in rent" ||
      compact === "inrent" ||
      raw === "‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á" ||
      raw === "reserved" ||
      raw === "booked"
    )
      return "‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á";

    // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    if (
      raw === "in use" ||
      compact === "inuse" ||
      raw === "‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà" ||
      raw === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡πà‡∏≤" ||
      raw === "rented"
    )
      return "‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà";

    // ‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á
    if (
      raw === "maintenance" ||
      raw === "maintainance" ||
      raw === "‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á" ||
      raw === "‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°"
    )
      return "‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á";

    // ‡∏ß‡πà‡∏≤‡∏á
    if (raw === "available" || raw === "‡∏ß‡πà‡∏≤‡∏á") return "‡∏ß‡πà‡∏≤‡∏á";

    // ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å ‚Üí ‡∏ß‡πà‡∏≤‡∏á (‡∏Å‡∏±‡∏ô UI ‡∏û‡∏±‡∏á)
    return raw;
  },

  apiUrl = "https://demo.erpeazy.com/api/method/erpnext.api.get_vehicles_admin",
  autoFetchIfEmpty = true,
}) {
  const [rows, setRows] = useState(cars);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  // modal state
  const [editOpen, setEditOpen] = useState(false);
  const [delOpen, setDelOpen] = useState(false);
  const [editForm, setEditForm] = useState(initCar());
  const [selectedId, setSelectedId] = useState(null);
  const [selectedPlate, setSelectedPlate] = useState("");
  const [selectedName, setSelectedName] = useState("");
  const [imgError, setImgError] = useState("");
  const [saving, setSaving] = useState(false);
  const editImgRef = useRef(null);

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Filter state ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const [filterQ, setFilterQ] = useState(""); // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  const [filterStatus, setFilterStatus] = useState("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞

  // sync external cars
  useEffect(() => setRows(cars), [cars]);

  // auto-fetch list
  useEffect(() => {
    if (!autoFetchIfEmpty) return;
    if (Array.isArray(cars) && cars.length > 0) return;

    const controller = new AbortController();
    (async () => {
      try {
        setLoading(true);
        setError("");
        const res = await fetch(apiUrl, {
          method: "GET",
          credentials: "include",
          signal: controller.signal,
        });
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const json = await res.json();
        const rawList =
          (Array.isArray(json?.message) && json.message) ||
          json?.data ||
          json?.result ||
          [];
        setRows(normalizeVehicles(rawList));
      } catch (e) {
        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô abort ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á error
        if (
          e?.name === "AbortError" ||
          String(e?.message).includes("aborted")
        ) {
          return;
        }
        setError(e?.message || "‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏ñ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      } finally {
        setLoading(false);
      }
    })();
    return () => controller.abort();
  }, [apiUrl, autoFetchIfEmpty, cars]);

  // ‚îÄ‚îÄ‚îÄ modal handlers ‚îÄ‚îÄ‚îÄ
  const openEdit = (car) => {
    setSelectedId(car?.id ?? null);
    setImgError("");
    if (editImgRef.current) editImgRef.current.value = "";

    setEditForm({
      id: car?.id ?? "",
      vid: car?.vid || car?.id || "",
      name: car?.name ?? "",
      brand: car?.brand ?? "",
      type: car?.type ?? "Sedan",
      transmission: car?.transmission ?? "‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
      licensePlate: car?.licensePlate ?? "",
      seats: String(car?.seats ?? 5),
      fuel: car?.fuel ?? "‡πÄ‡∏ö‡∏ô‡∏ã‡∏¥‡∏ô",
      year: String(car?.year ?? ""),
      pricePerDay: String(car?.pricePerDay ?? 0),
      // TIP: field status ‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ (EN/TH) ‚Äî ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≠‡∏ô‡πÇ‡∏ä‡∏ß‡πå/‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ getCarRowStatus
      status: toEN(car?.status ?? "Available"),
      company: car?.company || "",
      description: car?.description ?? "",
      // ‚úÖ ‡∏£‡∏π‡∏õ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô normalize ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô URL ‡πÄ‡∏ï‡πá‡∏° (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö /files/xxx)
      imageData: normalizeImage(car?.imageData || car?.imageUrl || ""),
      imageRemoved: false,
    });
    setEditOpen(true);
  };
  const closeEdit = () => setEditOpen(false);

  const handleEditChange = (e) => {
    const { name, value } = e.target;
    setEditForm((p) => ({ ...p, [name]: value ?? "" }));
  };

  const handleEditImageChange = (e) => {
    setImgError("");
    const file = e.target.files?.[0];
    if (!file) return;
    if (file.size > MAX_FILE_MB * 1024 * 1024) {
      setImgError(`‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô ${MAX_FILE_MB}MB`);
      if (editImgRef.current) editImgRef.current.value = "";
      return;
    }
    if (!/^image\//.test(file.type)) {
      setImgError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô");
      if (editImgRef.current) editImgRef.current.value = "";
      return;
    }
    const reader = new FileReader();
    reader.onload = () =>
      setEditForm((p) => ({
        ...p,
        imageData: String(reader.result), // data: URL
        imageRemoved: false,
      }));
    reader.onerror = () => {
      setImgError("‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      if (editImgRef.current) editImgRef.current.value = "";
    };
    reader.readAsDataURL(file);
  };

  const clearEditImage = () => {
    setEditForm((p) => ({ ...p, imageData: "", imageRemoved: true }));
    setImgError("");
    if (editImgRef.current) editImgRef.current.value = "";
  };

  /** üîó ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏õ ERPNext: edit_vehicles (FormData) */
  const saveEdit = async (e) => {
    e.preventDefault();
    if (saving) return;
    setSaving(true);
    try {
      const fd = new FormData();
      fd.append("license_plate", editForm.licensePlate || "");
      fd.append("vehicle_name", editForm.name || "");
      fd.append("status", editForm.status || "");
      fd.append("price", String(editForm.pricePerDay || 0));
      fd.append("company", editForm.company || "");
      fd.append("type", editForm.type || "");
      fd.append("v_type", editForm.type || "");
      fd.append("brand", editForm.brand || "");
      fd.append("seat", String(editForm.seats || ""));
      fd.append("year", String(editForm.year || ""));
      fd.append("gear_system", editForm.transmission || "");
      fd.append("fuel_type", editForm.fuel || "");
      fd.append("description", editForm.description || "");
      fd.append("vid", editForm.vid || editForm.id || selectedId || "");

      const newFile = editImgRef.current?.files?.[0];
      if (newFile) fd.append("file", newFile, newFile.name);
      if (editForm.imageRemoved && !newFile) fd.append("delete_image", "1");

      const headers = new Headers();
      // headers.set("Authorization", ERP_AUTH);

      const res = await fetch(ERP_EDIT_URL, {
        method: "POST",
        headers,
        body: fd,
        credentials: "include",
        redirect: "follow",
      });

      if (!res.ok) {
        const txt = await res.text().catch(() => "");
        throw new Error(`Save failed (${res.status}) ${txt}`.trim());
      }

      const nextImageData = newFile
        ? URL.createObjectURL(newFile) // blob: ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô UI ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        : editForm.imageRemoved
        ? ""
        : editForm.imageData; // ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà normalize ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß

      const updatedLocal = {
        id: editForm.id || selectedId,
        name: editForm.name,
        brand: editForm.brand,
        type: editForm.type,
        transmission: editForm.transmission,
        licensePlate: editForm.licensePlate,
        seats: Number(editForm.seats || 0),
        fuel: editForm.fuel,
        year: Number(editForm.year || 0),
        pricePerDay: Number(editForm.pricePerDay || 0),
        status: editForm.status,
        company: editForm.company || "",
        description: editForm.description,
        imageData: nextImageData,
        imageUrl: nextImageData,
      };

      setRows((list) =>
        list.map((it) => {
          const same =
            String(it.id) === String(updatedLocal.id) ||
            (updatedLocal.licensePlate &&
              String(it.licensePlate) === String(updatedLocal.licensePlate));
          return same ? { ...it, ...updatedLocal } : it;
        })
      );

      if (typeof onEdit === "function") onEdit(updatedLocal);
      closeEdit();
    } catch (err) {
      alert(err?.message || "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } finally {
      setSaving(false);
    }
  };

  /** ‡∏•‡∏ö‡∏Ñ‡∏±‡∏ô‡∏£‡∏ñ (ERP DELETE) */
  const openDelete = (car) => {
    setSelectedId(car?.id ?? null);
    setSelectedPlate(car?.licensePlate || "");
    setSelectedName(car?.name || "");
    setDelOpen(true);
  };
  const closeDelete = () => setDelOpen(false);

  const doDelete = async () => {
    try {
      if (!selectedPlate) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡∏Ñ‡∏±‡∏ô‡∏ô‡∏µ‡πâ");

      const erpHeaders = new Headers();
      erpHeaders.set("Content-Type", "application/json");
      // erpHeaders.set("Authorization", ERP_AUTH);

      const payload = { license_plate: selectedPlate };

      const res = await fetch(ERP_DELETE_URL, {
        method: "DELETE",
        headers: erpHeaders,
        body: JSON.stringify(payload),
        credentials: "include",
        redirect: "follow",
      });

      if (!res.ok) {
        const txt = await res.text().catch(() => "");
        throw new Error(`Delete failed (${res.status}) ${txt}`.trim());
      }

      setRows((list) =>
        list.filter(
          (it) =>
            String(it.licensePlate || "") !== String(selectedPlate) &&
            String(it.id || "") !== String(selectedId)
        )
      );

      if (typeof onDelete === "function") onDelete(selectedPlate);
      closeDelete();
    } catch (err) {
      alert(err?.message || "‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
  };

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Filtered rows (apply ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ + ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const filteredRows = useMemo(() => {
    const q = filterQ.trim().toLowerCase();
    return rows.filter((c) => {
      // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô getCarRowStatus ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
      const displayStatus = getCarRowStatus(c, bookings, now);
      const matchStatus =
        filterStatus === "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" ? true : displayStatus === filterStatus;
      if (!matchStatus) return false;

      if (!q) return true;

      const keys = [c.name, c.brand, c.licensePlate, c.type]
        .filter(Boolean)
        .map((v) => String(v).toLowerCase());

      return keys.some((v) => v.includes(q));
    });
  }, [rows, filterQ, filterStatus, bookings, now, getCarRowStatus]);

  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö column runnum ‚Üí ‡πÉ‡∏ä‡πâ filteredRows
  const dataForRender = useMemo(
    () => filteredRows.map((c, i) => ({ ...c, _idx: i })),
    [filteredRows]
  );

  const clearFilters = () => {
    setFilterQ("");
    setFilterStatus("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î");
  };

  return (
    <div className="bg-white rounded-xl border border-gray-200 shadow-sm p-5">
      {/* Header */}
      <div className="flex items-center justify-between">
        <h2 className="text-lg font-bold text-black">‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏ñ</h2>
        <div className="text-sm text-black">
          {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‚Ä¶" : `‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${rows.length} ‡∏Ñ‡∏±‡∏ô`}
        </div>
      </div>

      {/* Error */}
      {!!error && (
        <div className="mt-3 rounded-lg border border-rose-200 bg-rose-50 px-3 py-2 text-sm text-rose-700">
          {error}
        </div>
      )}

      {/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Filter Bar ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */}
      <div className="mt-4 flex flex-col gap-2 md:flex-row md:items-center md:justify-between">
        <div className="flex items-center gap-2">
          <input
            value={filterQ}
            onChange={(e) => setFilterQ(e.target.value)}
            placeholder="‡∏£‡∏∏‡πà‡∏ô / ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠ / ‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô..."
            className="w-64 rounded-lg border border-gray-300 px-3 py-2 text-sm text-black placeholder:text-gray-400 focus:border-gray-700 focus:ring-gray-700"
          />
          <select
            value={filterStatus}
            onChange={(e) => setFilterStatus(e.target.value)}
            className="rounded-lg border border-gray-300 px-3 py-2 text-sm text-black focus:border-gray-700 focus:ring-gray-700"
          >
            <option>‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
            <option>‡∏ß‡πà‡∏≤‡∏á</option>
            <option>‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á</option>
            <option>‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà</option>
            <option>‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á</option>
          </select>
          <button
            onClick={clearFilters}
            className="rounded-lg border border-gray-300 bg-gray-100 px-3 py-2 text-sm text-black hover:bg-gray-200"
          >
            ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
          </button>
        </div>

        <div className="text-sm text-black">
          ‡πÅ‡∏™‡∏î‡∏á {filteredRows.length} ‡∏à‡∏≤‡∏Å {rows.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        </div>
      </div>

      {/* Table */}
      <div className="overflow-x-auto mt-4">
        <table className="w-full min-w-full text-sm">
          <thead>
            <tr className="text-left text-black">
              <th className="py-2 pr-3">runnum</th>
              <th className="py-2 pr-3">‡∏£‡∏∏‡πà‡∏ô</th>
              <th className="py-2 pr-3">‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠</th>
              <th className="py-2 pr-3">‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô</th>
              <th className="py-2 pr-3">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ</th>
              <th className="py-2 pr-3">‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏ß‡∏±‡∏ô</th>
              <th className="py-2 pr-3">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
              <th className="py-2 pr-3">‡∏à‡∏≠‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ</th>
              <th className="py-2 pr-3">‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
            </tr>
          </thead>

          <tbody className="divide-y divide-gray-200 text-black">
            {loading && rows.length === 0 ? (
              <tr>
                {/* ‚úÖ ‡∏°‡∏µ 9 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå -> colSpan=9 */}
                <td colSpan={9} className="py-6 text-center">
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‚Ä¶
                </td>
              </tr>
            ) : filteredRows.length === 0 ? (
              <tr>
                {/* ‚úÖ ‡∏°‡∏µ 9 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå -> colSpan=9 */}
                <td colSpan={9} className="py-6 text-center">
                  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
                </td>
              </tr>
            ) : (
              dataForRender.map((c) => {
                const displayStatus = getCarRowStatus(c, bookings, now);
                const hideNext = [
                  "‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á",
                  "‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°",
                  "‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà",
                  "‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á",
                  "‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏±‡∏ö",
                  "‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á",
                ].includes(displayStatus);

                const nb = hideNext
                  ? null
                  : nextBookingMap[c.id] ||
                    nextBookingMap[c.licensePlate || c.name] ||
                    null;
                // // ‡πÉ‡∏ô map ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡∏Å‡πà‡∏≠‡∏ô return <tr>
                // console.log("row", { rawStatus: c.status, displayStatus });
                return (
                  <tr key={String(c.id)}>
                    <td className="py-3 pr-3">{c._idx + 1}</td>
                    <td className="py-3 pr-3 font-medium">{c.name}</td>
                    <td className="py-3 pr-3">{c.brand || "‚Äî"}</td>
                    <td className="py-3 pr-3">{c.licensePlate || "‚Äî"}</td>
                    <td className="py-3 pr-3">{c.type || "‚Äî"}</td>
                    <td className="py-3 pr-3">
                      {fmtBaht(Number(c.pricePerDay || 0))} ‡∏ø
                    </td>
                    <td className="py-3 pr-3">
                      <StatusBadge
                        value={
                          displayStatus ||
                          c.status ||
                          c.stage ||
                          c.vehicle_stage ||
                          c.car_status ||
                          "‡∏ß‡πà‡∏≤‡∏á"
                        }
                      />
                    </td>
                    <td className="py-3 pr-3">
                      {nb ? (
                        <div className="leading-tight">
                          <div className="font-medium">{nb.bookingCode}</div>
                          <div className="text-xs text-gray-600">
                            {fmtDateTimeLocal(nb.pickupTime)} ‚Üí{" "}
                            {fmtDateTimeLocal(nb.returnTime)}
                          </div>
                        </div>
                      ) : (
                        <span className="text-gray-500">‚Äî</span>
                      )}
                    </td>
                    <td className="py-3 pr-3">
                      <div className="flex items-center gap-2">
                        <button
                          onClick={() => openEdit(c)}
                          className="rounded-lg border border-gray-300 bg-gray-200 px-3 py-1.5 text-black hover:bg-gray-300"
                        >
                          ‚úé ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                        </button>
                        <button
                          onClick={() => openDelete(c)}
                          className="rounded-lg border border-gray-300 bg-gray-200 px-3 py-1.5 text-black hover:bg-gray-300"
                        >
                          ‡∏•‡∏ö
                        </button>
                      </div>
                    </td>
                  </tr>
                );
              })
            )}
          </tbody>
        </table>
      </div>

      {/* Modal: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏ñ */}
      {editOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
          <div
            className="absolute inset-0 bg-gray-800/60 hover:bg-gray-900/70 transition-colors"
            onClick={closeEdit}
          />
          <div className="relative z-10 w-full max-w-2xl rounded-xl bg-white p-6 shadow-xl">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-bold text-black">
                ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ #{selectedId}
              </h3>
              <button
                onClick={closeEdit}
                className="rounded-md px-2 py-1 text-gray-600 hover:bg-gray-100"
                aria-label="‡∏õ‡∏¥‡∏î"
              >
                ‚úï
              </button>
            </div>

            <form
              onSubmit={saveEdit}
              className="mt-4 grid grid-cols-1 md:grid-cols-6 gap-3 text-black"
            >
              <div className="md:col-span-3">
                <label className="block text-xs font-semibold mb-1">
                  ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏ñ *
                </label>
                <input
                  name="name"
                  value={editForm.name}
                  onChange={handleEditChange}
                  required
                  className="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-gray-700 focus:ring-gray-700"
                />
              </div>
              <div className="md:col-span-3">
                <label className="block text-xs font-semibold mb-1">
                  ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠ *
                </label>
                <input
                  name="brand"
                  value={editForm.brand}
                  onChange={handleEditChange}
                  required
                  className="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-gray-700 focus:ring-gray-700"
                />
              </div>

              <div className="md:col-span-2">
                <label className="block text-xs font-semibold mb-1">
                  ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
                </label>
                <select
                  name="type"
                  value={editForm.type}
                  onChange={handleEditChange}
                  className="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-gray-700 focus:ring-gray-700"
                >
                  <option>Sedan</option>
                  <option>SUV</option>
                  <option>Hatchback</option>
                  <option>Pickup</option>
                  <option>JDM</option>
                  <option>Van</option>
                </select>
              </div>
              <div className="md:col-span-2">
                <label className="block text-xs font-semibold mb-1">
                  ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡πå
                </label>
                <select
                  name="transmission"
                  value={editForm.transmission}
                  onChange={handleEditChange}
                  className="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-gray-700 focus:ring-gray-700"
                >
                  <option value="‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥">‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (Auto)</option>
                  <option value="‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤">‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ (Manual)</option>
                </select>
              </div>
              <div className="md:col-span-2">
                <label className="block text-xs font-semibold mb-1">
                  ‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
                </label>
                <input
                  name="licensePlate"
                  value={editForm.licensePlate}
                  onChange={handleEditChange}
                  className="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-gray-700 focus:ring-gray-700"
                />
              </div>

              <div className="md:col-span-2">
                <label className="block text-xs font-semibold mb-1">
                  ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á
                </label>
                <input
                  type="number"
                  min="1"
                  name="seats"
                  value={editForm.seats}
                  onChange={handleEditChange}
                  className="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-gray-700 focus:ring-gray-700"
                />
              </div>
              <div className="md:col-span-2">
                <label className="block text-xs font-semibold mb-1">
                  ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á
                </label>
                <select
                  name="fuel"
                  value={editForm.fuel}
                  onChange={handleEditChange}
                  className="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-gray-700 focus:ring-gray-700"
                >
                  <option>‡πÄ‡∏ö‡∏ô‡∏ã‡∏¥‡∏ô</option>
                  <option>‡∏î‡∏µ‡πÄ‡∏ã‡∏•</option>
                  <option>‡πÑ‡∏Æ‡∏ö‡∏£‡∏¥‡∏î</option>
                  <option>‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ (EV)</option>
                  <option>LPG</option>
                  <option>NGV</option>
                </select>
              </div>
              <div className="md:col-span-2">
                <label className="block text-xs font-semibold mb-1">
                  ‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ
                </label>
                <input
                  type="number"
                  name="year"
                  min="1980"
                  max="2100"
                  value={editForm.year}
                  onChange={handleEditChange}
                  className="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-gray-700 focus:ring-gray-700"
                />
              </div>

              <div className="md:col-span-3">
                <label className="block text-xs font-semibold mb-1">
                  ‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏ß‡∏±‡∏ô (‡∏ö‡∏≤‡∏ó) *
                </label>
                <input
                  type="number"
                  min="0"
                  name="pricePerDay"
                  value={editForm.pricePerDay}
                  onChange={handleEditChange}
                  required
                  className="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-gray-700 focus:ring-gray-700"
                />
              </div>
              <div className="md:col-span-3">
                <label className="block text-xs font-semibold mb-1">
                  ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                </label>
                <select
                  name="status"
                  value={editForm.status}
                  onChange={handleEditChange}
                  className="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-gray-700 focus:ring-gray-700"
                >
                  {/* ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô ERP ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô EN ‡∏Å‡πá‡πÑ‡∏î‡πâ ‡πÄ‡∏£‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á */}
                  <option value="Available">‡∏ß‡πà‡∏≤‡∏á</option>
                  <option value="In Use">‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà</option>
                  <option value="In Rent">‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á</option>
                  <option value="Maintenance">‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á</option>
                </select>
              </div>

              {/* ‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡πà‡∏≠‡∏Ñ‡∏±‡∏ô */}
              <div className="md:col-span-6">
                <label className="block text-xs font-semibold mb-1">
                  ‡∏£‡∏π‡∏õ‡∏£‡∏ñ (‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà/‡∏•‡∏ö) ‚Äî ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡πà‡∏≠‡∏Ñ‡∏±‡∏ô
                </label>
                <input
                  ref={editImgRef}
                  type="file"
                  accept="image/*"
                  onChange={handleEditImageChange}
                  className="block w-full text-sm text-gray-700 file:mr-3 file:rounded-lg file:border file:border-gray-300 file:bg-gray-200 file:px-3 file:py-2 file:text-black hover:file:bg-gray-300"
                />
                {imgError && (
                  <div className="mt-1 text-xs text-rose-600">{imgError}</div>
                )}

                {editForm.imageData ? (
                  <div className="mt-3">
                    {/* ‚úÖ ‡πÉ‡∏ä‡πâ normalizeImage ‡∏Å‡∏±‡∏ô‡∏û‡∏≤‡∏ò /files/... */}
                    <img
                      src={normalizeImage(editForm.imageData)}
                      alt="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏£‡∏ñ"
                      className="h-28 w-auto rounded-lg border object-cover"
                    />
                    <div className="mt-2">
                      <button
                        type="button"
                        onClick={clearEditImage}
                        className="rounded-md bg-gray-200 px-3 py-1 text-sm hover:bg-gray-300"
                      >
                        ‡∏•‡∏ö‡∏£‡∏π‡∏õ
                      </button>
                    </div>
                  </div>
                ) : editForm.imageRemoved ? (
                  <p className="mt-1 text-xs text-gray-500">
                    ‡∏à‡∏∞‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î ‚Äú‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‚Äù
                  </p>
                ) : (
                  <p className="mt-1 text-xs text-gray-500">
                    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå .jpg .png .webp ‚â§ {MAX_FILE_MB}MB
                  </p>
                )}
              </div>

              <div className="md:col-span-6">
                <label className="block text-xs font-semibold mb-1">
                  ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                </label>
                <textarea
                  name="description"
                  rows={4}
                  value={editForm.description}
                  onChange={handleEditChange}
                  className="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-gray-700 focus:ring-gray-700"
                />
              </div>

              <div className="md:col-span-6 flex items-center justify-end gap-3 pt-2">
                <button
                  type="button"
                  onClick={closeEdit}
                  className="px-4 py-2 rounded-lg bg-gray-200 text-black hover:bg-gray-300"
                >
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>
                <button
                  type="submit"
                  disabled={saving}
                  className="px-6 py-2 rounded-lg bg-gray-700 text-white hover:bg-gray-800 disabled:opacity-60"
                >
                  {saving ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‚Ä¶" : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á"}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Modal: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö */}
      {delOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
          <div
            className="absolute inset-0 bg-gray-800/60 hover:bg-gray-900/70 transition-colors"
            onClick={closeDelete}
          />
          <div className="relative z-10 w-full max-w-md rounded-xl bg-white p-6 shadow-xl text-black">
            <h3 className="text-lg font-bold">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö</h3>
            <p className="mt-2 text-sm text-gray-700">
              ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏ñ
              {selectedName ? (
                <>
                  {" "}
                  <b>{selectedName}</b>
                </>
              ) : null}{" "}
              {selectedPlate ? (
                <>
                  (‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô <b>{selectedPlate}</b>)
                </>
              ) : (
                <>
                  ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç <b>#{selectedId}</b>
                </>
              )}{" "}
              ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?
            </p>
            <div className="mt-5 flex items-center justify-end gap-2">
              <button
                onClick={closeDelete}
                className="px-4 py-2 rounded-lg bg-gray-200 hover:bg-gray-300"
              >
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
              <button
                onClick={doDelete}
                className="px-5 py-2 rounded-lg bg-gray-700 text-white hover:bg-gray-800"
              >
                ‡∏•‡∏ö
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

const toEN = (s) => {
  const x = String(s ?? "")
    .normalize("NFKC")
    .replace(/\u00A0|\u200B|\u200C|\u200D/g, " ")
    .trim()
    .toLowerCase()
    .replace(/\s+/g, " ");
  if (["in rent", "inrent", "reserved", "booked", "‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á"].includes(x))
    return "In Rent";
  if (["in use", "inuse", "rented", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡πà‡∏≤", "‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà"].includes(x))
    return "In Use";
  if (["maintenance", "maintainance", "‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á", "‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°"].includes(x))
    return "Maintenance";
  if (["available", "‡∏ß‡πà‡∏≤‡∏á"].includes(x)) return "Available";
  return "Available";
};

/* helpers */

function initCar() {
  return {
    id: "",
    vid: "",
    name: "",
    brand: "",
    type: "Sedan",
    transmission: "‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
    licensePlate: "",
    seats: "5",
    fuel: "‡πÄ‡∏ö‡∏ô‡∏ã‡∏¥‡∏ô",
    year: "",
    pricePerDay: "0",
    status: "‡∏ß‡πà‡∏≤‡∏á",
    company: "",
    description: "",
    imageData: "",
    imageRemoved: false,
  };
}

function normalizeVehicles(rawList) {
  if (!Array.isArray(rawList)) return [];
  if (rawList.length > 0 && isPlainObject(rawList[0]))
    return rawList.map(mapVehicleObject);
  return rawList.map(mapVehicleArray);
}
const isPlainObject = (v) =>
  typeof v === "object" && v !== null && !Array.isArray(v);

function mapVehicleObject(v) {
  // ‡∏£‡∏π‡∏õ: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö vehicle_image ‡πÅ‡∏•‡∏∞‡∏û‡∏≤‡∏ò /files/...
  const rawImg =
    v.imageData ||
    v.image_url ||
    v.image ||
    v.photo ||
    v.thumbnail ||
    v.vehicle_image || // <- ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö payload ‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ
    "";
  const img = normalizeImage(rawImg);

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç/‡∏™‡∏ï‡∏£‡∏¥‡∏á
  const priceNum = Number(v.price_per_day ?? v.rate ?? v.price ?? 0);
  const seatsNum = Number(v.seats ?? v.seat ?? 5); // <- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö seat
  const yearNum = Number(v.year ?? 0);

  return {
    id:
      v.id ||
      v.name ||
      v.vehicle_id ||
      v.vehicle ||
      v.license_plate ||
      v.plate ||
      "",
    vid: v.vid || "",
    name: v.model || v.vehicle_name || v.name || "‚Äî",
    brand: v.brand || v.make || "",
    licensePlate: (v.license_plate || v.plate || v.licensePlate || "").trim(),
    pricePerDay: priceNum,
    status:
      v.status ||
      v.stage ||
      v.vehicle_stage ||
      v.car_status ||
      v.status_text ||
      "‡∏ß‡πà‡∏≤‡∏á",
    // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏µ‡∏¢‡πå‡∏à‡∏≤‡∏Å backend
    type: v.type || v.v_type || v.ftype || v.category || "Sedan",
    transmission: v.transmission || v.gear_system || "‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", // <- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö gear_system
    seats: seatsNum,
    fuel: v.fuel || v.fuel_type || "‡πÄ‡∏ö‡∏ô‡∏ã‡∏¥‡∏ô", // <- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö fuel_type
    year: yearNum,
    company: v.company || "",
    description: v.description || "",
    imageData: img, // ‡πÉ‡∏ä‡πâ URL ‡πÄ‡∏ï‡πá‡∏° / data: / blob: ‡πÑ‡∏î‡πâ
    imageUrl: img,
  };
}

function mapVehicleArray(arr) {
  const [id, brand, model, plate, price, status, img] = arr;
  const imgUrl = normalizeImage(img || "");
  return {
    id: id ?? "",
    vid: "",
    name: model ?? "‚Äî",
    brand: brand ?? "",
    licensePlate: plate ?? "",
    pricePerDay: Number(price ?? 0),
    status: status || "‡∏ß‡πà‡∏≤‡∏á",
    type: "Sedan",
    transmission: "‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
    seats: 5,
    fuel: "‡πÄ‡∏ö‡∏ô‡∏ã‡∏¥‡∏ô",
    year: 0,
    company: "",
    description: "",
    imageData: imgUrl,
    imageUrl: imgUrl,
  };
}
